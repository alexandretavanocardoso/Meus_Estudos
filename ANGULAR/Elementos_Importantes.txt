

====>>> ELEMTOS IMPORTANTES <<<====


===>> BINDINGS <<===

-- Dentro do compente html entre [] = [name]="el"

===>> Evento <<<====

-- Dentro do compente html entra ()

(click)="Método()"

===>> One Way Data Binding <<<====

-- Do componente pro HTML

[value]=""

===>> Two Way Data Binding <<<====

-- Altera ambos ts - html

[(ngModel)]=""

===>> COMPONENTE <<===

-- html
-- css, sass, less
-- ts

===>> DIRETIVAS <<===

@Directive({
	selector: '[nome]'
});

===>> Atributos <<<====
- Alterar aparencia e comportamento de elemento, componente

=> Estrutural "*"
- Aletera a DOM, adicionando ou removendo

===>> ROTAS <<===

routerLink="endereco"
routerLinkActive="classe"

app-routing
const route: Routes = [{
	{path: 'endereco', component: Componente}
}]

app.html
<router-outlet></router-outlet>

===>> PIPES <<===

-- Processamentos em intorpolações

{{ evento.Nome | pipe }}
{{ evento.Nome | pipe: 'parametros' }}

EX. {{ evento.price | currency: 'BRL' }} - converte em moeda - brl - Real

Ex. {{ evento.nome | uppercase }} = LETRA MAIUSCULA

===>> OBSERVABLE <<===

 Padrão orientado a Evento
 
 Observer -> Subject -> Evento -> Subject Notifica os Observer, executandos suas funções

 callbacks -> promisses	-> observable: reusavel, stream de dados, operadores

 
Ex.

criarNoBackEnd(produto: Produto): Observable<Produto>{
	return this.http.post<Produto>(this.url, produto);
}

criarProduto(): void{
	this.criarNoBackend(this.produto).subscribe(() => {
		this.exibirMensagem("Salvo com Sucesso");
	});
}


===>> SERVICES <<===

 ng g s services/product

 São classes que tem princiupal objetivo ORGANIZAR e COMPARTILHAR métodos e dados
 entre COMPONENTES
 
 @injectable({
	providedIn: "root",
 });
 
===>> Injeção de Depencias <<<====
 
 É um padrão no qual a classe revebe as DEPENDENCIAS de uma FONTE EXTERNA ao invés de
 criar por conta´própria
 
EX.

====>> SEM INJEÇÂO

class Motor{}

class Carro{
	motor: Motor
	
	construtor() {
		this.motor = new Motor()
	}
}

====>> COM INJEÇÃO

class Motor{
	cilindrada: number
	
	construtor(cilindrada: number) {
		this.cilindrada = cilindrada
	}
}

class Carro{
	motor: Motor
	
	construtor(motor: Motor) {
		this.motor = Motor
	}
}























